name: Semantic Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  PLATFORMIO_VERSION: 6.1.7

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      release_notes: ${{ steps.version.outputs.release_notes }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual release
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          # Parse current version and increment
          if [[ "$VERSION" == "auto" ]]; then
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            LATEST_VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
            
            case "$RELEASE_TYPE" in
              "major")
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              "patch")
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
          else
            NEW_VERSION="$VERSION"
          fi
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # Tag-based release
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          NEW_VERSION=${TAG_VERSION#v}
        else
          # Auto-increment patch version
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Generate release notes
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          RELEASE_NOTES="## ðŸš€ Release v$NEW_VERSION\n\n### What's New\n- Automated semantic versioning\n- Pre-compiled firmware packages\n- Comprehensive testing and validation\n\n### Installation\n1. Download the firmware package\n2. Extract and use the appropriate .hex file\n3. Upload to Arduino or use in SimulIDE"
        else
          # Get commits since last tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -n "$LATEST_TAG" ]]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" $LATEST_TAG..HEAD)
            RELEASE_NOTES="## ðŸš€ Release v$NEW_VERSION\n\n### Changes Since $LATEST_TAG\n$COMMITS\n\n### Installation\n1. Download the firmware package\n2. Extract and use the appropriate .hex file\n3. Upload to Arduino or use in SimulIDE"
          else
            RELEASE_NOTES="## ðŸš€ Release v$NEW_VERSION\n\n### Initial Release\n- Complete Arduino rocket launcher firmware\n- SimulIDE simulation support\n- Comprehensive testing framework\n\n### Installation\n1. Download the firmware package\n2. Extract and use the appropriate .hex file\n3. Upload to Arduino or use in SimulIDE"
          fi
        fi
        
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "Version: $NEW_VERSION"
        echo "Tag: v$NEW_VERSION"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: determine-version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio==${{ env.PLATFORMIO_VERSION }}
        
    - name: Run tests
      working-directory: ./code/RocketLauncher
      run: pio test -e native
        
    - name: Build firmware
      working-directory: ./code/RocketLauncher
      run: |
        pio run -e simulide
        pio run -e uno_hw
        
    - name: Prepare artifacts
      run: |
        mkdir -p release
        cp ./code/RocketLauncher/.pio/build/simulide/firmware.hex release/simulation-firmware.hex
        cp ./code/RocketLauncher/.pio/build/uno_hw/firmware.hex release/hardware-firmware.hex
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-v${{ needs.determine-version.outputs.version }}
        path: ./release/
        retention-days: 90

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [determine-version, build-and-test]
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: firmware-v${{ needs.determine-version.outputs.version }}
        path: ./artifacts
        
    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ needs.determine-version.outputs.tag }}
        git push origin ${{ needs.determine-version.outputs.tag }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.determine-version.outputs.tag }}
        release_name: "Luke's Rocket Launcher v${{ needs.determine-version.outputs.version }}"
        body: ${{ needs.determine-version.outputs.release_notes }}
        draft: false
        prerelease: false
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifacts/simulation-firmware.hex
        asset_name: simulation-firmware-v${{ needs.determine-version.outputs.version }}.hex
        asset_content_type: application/octet-stream
        
    - name: Upload hardware firmware
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifacts/hardware-firmware.hex
        asset_name: hardware-firmware-v${{ needs.determine-version.outputs.version }}.hex
        asset_content_type: application/octet-stream
